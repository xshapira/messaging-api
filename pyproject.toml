[tool.poetry]
name = "Messaging API"
version = "0.1.0"
description = ""
authors = ["Max Shapira <max@winoutt.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
django = "^4.2.3"
psycopg = { extras = ["binary"], version = "3.1.9" }
pydantic-settings = { extras = ["dotenv"], version = "^2.0.2" }
djangorestframework = "^3.14.0"
whitenoise = { extras = ["brotli"], version = "^6.5.0" }

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.4"
mypy = "^1.3.0"
django-stubs = { extras = ["compatible-mypy"], version = "^4.2.3" }
pytest = "7.4.0"
pytest-sugar = "^0.9.6"
djangorestframework-stubs = { extras = [
  "compatible-mypy",
], version = "^3.14.2" }

[tool.mypy]
follow_imports = "silent"
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
no_implicit_reexport = true
check_untyped_defs = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
show_error_codes = true
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

[tool.ruff]
line-length = 88
exclude = ['.git', '__pycache__', '__init__.py', '.mypy_cache', '.pytest_cache']
lint.select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "C",  # flake8-comprehensions
  "B",  # flake8-bugbear
  "UP", # pyupgrade
]
lint.ignore = [
  "E501", # line too long
  "C901", # Comprehension is too complex (11 > 10)
  "W191", # indentation contains tabs
  "E402",
]
lint.unfixable = ["F841"]
extend-include = ["*.ipynb"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.django-stubs]
django_settings_module = "config.settings"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
